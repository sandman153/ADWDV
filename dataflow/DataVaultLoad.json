{
	"name": "DataVaultLoad",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "StageSource",
						"type": "DatasetReference"
					},
					"name": "DataVaultSource"
				},
				{
					"dataset": {
						"referenceName": "DVHUB",
						"type": "DatasetReference"
					},
					"name": "HUBSource"
				},
				{
					"dataset": {
						"referenceName": "DVSAT",
						"type": "DatasetReference"
					},
					"name": "SATSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DVHUB",
						"type": "DatasetReference"
					},
					"name": "HubLoad"
				},
				{
					"dataset": {
						"referenceName": "DVSAT",
						"type": "DatasetReference"
					},
					"name": "SATLoad"
				}
			],
			"transformations": [
				{
					"name": "hashKeys"
				},
				{
					"name": "NewRows"
				},
				{
					"name": "TargetHubKey"
				},
				{
					"name": "NewHubRecords"
				},
				{
					"name": "RenameCols"
				},
				{
					"name": "TargetSATKey"
				},
				{
					"name": "SatRowsExist"
				},
				{
					"name": "InsertSatRows"
				},
				{
					"name": "NewSATRecords"
				}
			],
			"script": "parameters{\n\thashVal as string,\n\tTargetID as string,\n\thashDiff as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true) ~> DataVaultSource\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> HUBSource\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SATSource\nDataVaultSource derive(each(match(name==$hashVal), replace($$,'ID','VID') = toString(sha2(256, toString(byName($hashVal)), currentTimestamp()) )),\n\t\tHKey = toString(sha2(256, toString(byName($hashVal)), currentTimestamp()) ),\n\t\thashDiffValue = sha2(256, columns())) ~> hashKeys\nTargetHubKey, hashKeys exists(HKey == hashID,\n\tnegate:true,\n\tbroadcast: 'auto')~> NewRows\nHUBSource derive(hashID = toString(byName($TargetID))) ~> TargetHubKey\nInsertSatRows select(mapColumn(\n\t\tHKey = hashID,\n\t\teach(match(name==$hashVal))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> NewHubRecords\nhashKeys select(mapColumn(\n\t\teach(match(name!=$hashVal&&name!='hashDiffValue'))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RenameCols\nSATSource derive(hashID = toString(byName($TargetID)),\n\t\teach(match(name=='LoadDateTime'), $$ = $$)) ~> TargetSATKey\nRenameCols, TargetSATKey exists(HKey == hashID\n\t&& ERROR_FUNCTION('') == ERROR_FUNCTION('')\n\t&& LoadDateTime == ERROR_FUNCTION(''),\n\tnegate:true,\n\tbroadcast: 'auto')~> SatRowsExist\nNewRows alterRow(insertIf(true())) ~> InsertSatRows\nSatRowsExist alterRow(insertIf(true())) ~> NewSATRecords\nNewHubRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1) ~> HubLoad\nNewSATRecords sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tHKey,\n\t\tLoadDateTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 2) ~> SATLoad"
		}
	}
}