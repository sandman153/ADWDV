{
	"name": "DataVaultLoad",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "StageSource",
						"type": "DatasetReference"
					},
					"name": "DataVaultSource"
				},
				{
					"dataset": {
						"referenceName": "DVHUB",
						"type": "DatasetReference"
					},
					"name": "HUBSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DVHUB",
						"type": "DatasetReference"
					},
					"name": "HubLoad"
				}
			],
			"transformations": [
				{
					"name": "hashKeys"
				},
				{
					"name": "NewRows"
				},
				{
					"name": "ExistRows"
				},
				{
					"name": "TargetKey"
				},
				{
					"name": "RowsToInsert"
				}
			],
			"script": "parameters{\n\thashVal as string,\n\tTargetID as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true) ~> DataVaultSource\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> HUBSource\nDataVaultSource derive(hashVID = toString(sha2(256, byName($hashVal)))) ~> hashKeys\nExistRows alterRow(insertIf(true())) ~> NewRows\nhashKeys, TargetKey exists(hashVID == hashID,\n\tnegate:true,\n\tbroadcast: 'auto')~> ExistRows\nHUBSource derive(hashID = toString(byName($TargetID))) ~> TargetKey\nNewRows select(mapColumn(\n\t\teach(match(locate('ID', lower(name)) != 0),\n\t\t\t$hashVal = $$),\n\t\teach(match(locate('VID', lower(name)) != 0),\n\t\t\treplace($TargetID, 'ID', 'VID') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RowsToInsert\nRowsToInsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> HubLoad"
		}
	}
}